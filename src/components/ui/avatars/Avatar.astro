---
interface Props {
  src?: string | null;
  alt?: string;
  fullName?: string | null;
  size?: 'sm' | 'md' | 'lg' | 'xl';
  className?: string;
}

const { 
  src, 
  alt = 'User avatar', 
  fullName, 
  size = 'md',
  className = '' 
} = Astro.props;

const sizeClasses = {
  sm: 'w-8 h-8 text-xs',
  md: 'w-16 h-16 text-lg',
  lg: 'w-20 h-20 text-xl',
  xl: 'w-24 h-24 text-2xl'
};

const sizeClass = sizeClasses[size];

function getInitials(name?: string | null): string {
  if (!name) return 'U';
  
  const words = name.trim().split(' ');
  if (words.length === 1) {
    return words[0].charAt(0).toUpperCase();
  }
  
  return (words[0].charAt(0) + words[words.length - 1].charAt(0)).toUpperCase();
}

const initials = getInitials(fullName);
const avatarId = `avatar-${Math.random().toString(36).substr(2, 9)}`;
---

<div class={`relative ${sizeClass} ${className}`}>
  {src ? (
    <img
      id={avatarId}
      src={src}
      alt={alt}
      class={`${sizeClass} rounded-full border-2 border-neutral-200 dark:border-neutral-600 shadow-md shadow-neutral-900/20 object-cover`}
      loading="lazy"
    />
  ) : null}
  
  <div 
    id={`fallback-${avatarId}`}
    class={`${sizeClass} rounded-full border-2 border-neutral-200 dark:border-neutral-600 shadow-md shadow-neutral-900/20 bg-gradient-to-br from-[#576469] to-[#393E41] flex items-center justify-center font-semibold text-white ${src ? 'hidden' : ''}`}
  >
    {initials}
  </div>
</div>

<script define:vars={{ avatarId, src }}>
  document.addEventListener('DOMContentLoaded', function() {
    if (!src) return;
    
    const img = document.getElementById(avatarId);
    const fallback = document.getElementById(`fallback-${avatarId}`);
    
    if (!img || !fallback) return;
    
    let hasLoaded = false;
    let retryCount = 0;
    const maxRetries = 2;
    
    function showFallback() {
      if (img) img.style.display = 'none';
      if (fallback) fallback.classList.remove('hidden');
    }
    
    function showImage() {
      if (img) img.style.display = 'block';
      if (fallback) fallback.classList.add('hidden');
    }
    
    function handleImageError() {
      console.warn(`Avatar load failed for ${src}, attempt ${retryCount + 1}`);
      
      if (retryCount < maxRetries) {
        retryCount++;
        const timestamp = new Date().getTime();
        img.src = `${src}&_retry=${retryCount}&_t=${timestamp}`;
        return;
      }
      
      showFallback();
    }
    
    function handleImageLoad() {
      hasLoaded = true;
      showImage();
    }
    
    img.addEventListener('error', handleImageError);
    img.addEventListener('load', handleImageLoad);
    
    const timeoutId = setTimeout(() => {
      if (!hasLoaded) {
        console.warn(`Avatar load timeout for ${src}`);
        showFallback();
      }
    }, 5000);
    
    if (img.complete && img.naturalHeight !== 0) {
      clearTimeout(timeoutId);
      handleImageLoad();
    }
  });
</script>