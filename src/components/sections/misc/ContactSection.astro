---
import AuthBtn from "@components/ui/buttons/AuthBtn.astro";
import ContactIconBlock from "@components/ui/blocks/ContactIconBlock.astro";
import TextInput from "@components/ui/forms/input/TextInput.astro";
import EmailContactInput from "@components/ui/forms/input/EmailContactInput.astro";
import TextAreaInput from "@components/ui/forms/input/TextAreaInput.astro";
import Icon from "@components/ui/icons/Icon.astro";
import { getLangFromUrl, useTranslations } from "../../../i18n/utils";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<section class="mx-auto max-w-[85rem] px-4 py-6 sm:py-10 sm:px-6 lg:px-8 lg:py-14">
  <div class="mx-auto max-w-2xl lg:max-w-5xl">
    <div class="text-center">
      <h1
        class="text-xl font-bold tracking-tight text-balance text-neutral-800 sm:text-2xl md:text-4xl md:leading-tight dark:text-neutral-200"
      >
        {t("contact.title")}
      </h1>
      <p class="mt-1 text-sm sm:text-base text-pretty text-neutral-600 dark:text-neutral-400">
        {t("contact.subTitle")}
      </p>
    </div>

    <div class="mt-6 sm:mt-8 md:mt-12 grid items-center gap-4 sm:gap-6 lg:grid-cols-2 lg:gap-16">
      <div class="flex flex-col rounded-xl p-3 sm:p-4 md:p-6 lg:p-8">
        <h2
          class="mb-4 sm:mb-6 md:mb-8 text-lg sm:text-xl font-bold text-neutral-700 dark:text-neutral-300"
        >
          {t("contact.form.title")}
        </h2>
        
        <div id="success-message" class="hidden mb-3 sm:mb-4 p-3 sm:p-4 rounded-lg bg-indigo-400 text-white">
          <p class="text-sm sm:text-base">{t("contact.form.result")}</p>
        </div>
        
        <div id="error-message" class="hidden mb-3 sm:mb-4 p-3 sm:p-4 rounded-lg bg-red-100 border border-red-400 text-red-700">
          <p id="error-text" class="text-sm sm:text-base">Hubo un error al enviar el mensaje. Por favor, inténtalo de nuevo.</p>
        </div>

        <form id="contact-form">
          <div class="grid gap-3 sm:gap-4">
            <div class="grid grid-cols-1 gap-3 sm:gap-4 sm:grid-cols-2">
              <TextInput
                id="hs-firstname-contacts"
                label={t("contact.form.firstName")}
                name="hs-firstname-contacts"
              />
              <TextInput
                id="hs-lastname-contacts"
                label={t("contact.form.lastName")}
                name="hs-lastname-contacts"
              />
            </div>
            
            <EmailContactInput id="hs-email-contacts" />

            <div>
              <label
                for="contact-reason"
                class="mb-1.5 sm:mb-2 block text-sm font-medium dark:text-white"
              >
                {t("contact.form.reason.label")}
              </label>
              <select
                id="contact-reason"
                name="contact-reason"
                class="block w-full rounded-lg border-neutral-200 px-3 py-2.5 sm:px-4 sm:py-3 text-sm focus:border-neutral-500 focus:ring-neutral-500 disabled:pointer-events-none disabled:opacity-50 dark:border-neutral-700 dark:bg-neutral-900 dark:text-neutral-400 dark:focus:ring-neutral-600"
              >
                <option value="">{t("contact.form.reason.select")}</option>
                <option value="feature">{t("contact.form.reason.billing")}</option>
                <option value="support">{t("contact.form.reason.feedback")}</option>
                <option value="other">{t("contact.form.reason.other")}</option>
              </select>
            </div>
            
            <TextAreaInput
              id="hs-about-contacts"
              label={t("contact.form.details")}
              name="hs-about-contacts"
            />
          </div>

          <div class="mt-3 sm:mt-4 grid">
            <button
              type="submit"
              id="submit-button"
              class="group relative inline-flex items-center justify-center gap-2 rounded-xl bg-neutral-900 px-4 py-2.5 sm:px-6 sm:py-3.5 text-sm font-semibold text-white shadow-lg transition-all hover:bg-neutral-800 hover:shadow-xl hover:-translate-y-0.5 hover:scale-105 dark:bg-neutral-100 dark:text-neutral-900 dark:hover:bg-white"
            >
              <span id="button-text">{t("contact.form.send")}</span>
              <span id="loading-spinner" class="hidden ml-2">
                <svg class="animate-spin h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                  <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
              </span>
            </button>
          </div>

          <div class="mt-2 sm:mt-3 text-center">
            <p class="text-xs sm:text-sm text-neutral-600 dark:text-neutral-400">
              {t("contact.form.replyTime")}
            </p>
          </div>
        </form>
      </div>

      <div class="divide-y divide-neutral-300 dark:divide-neutral-700">
        <ContactIconBlock
          heading={t("contact.blocks.faq.heading")}
          content={t("contact.blocks.faq.content")}
          isLinkVisible={true}
          linkTitle={t("contact.blocks.faq.linkTitle")}
          linkURL={`/${lang}/faq`}
          isArrowVisible={true}
        >
          <Icon name="chatBubbleFilled" />
        </ContactIconBlock>

        <ContactIconBlock
          heading={t("contact.blocks.email.heading")}
          content={t("contact.blocks.email.content")}
          isLinkVisible={true}
          linkTitle="info@peekvisor.com"
          linkURL="mailto:info@peekvisor.com"
        >
          <Icon name="mailFilled" />
        </ContactIconBlock>

      </div>
    </div>

    <div class="mt-6 sm:mt-8 flex justify-center">
      <button
        id="back-button"
        class="btn-gradient hover:btn-gradient-hover rounded-lg px-4 py-2.5 sm:px-6 sm:py-3 text-sm font-medium text-white transition-all duration-200 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:outline-none sm:text-base"
      >
        {t("ui.goBack")}
      </button>
    </div>
  </div>
</section>

<script define:vars={{ lang }}>
  document.addEventListener("DOMContentLoaded", function () {
    const backButton = document.getElementById("back-button");
    const contactForm = document.getElementById("contact-form");
    const submitButton = document.getElementById("submit-button");
    const buttonText = document.getElementById("button-text");
    const loadingSpinner = document.getElementById("loading-spinner");
    const successMessage = document.getElementById("success-message");
    const errorMessage = document.getElementById("error-message");
    const errorText = document.getElementById("error-text");

    if (backButton) {
      backButton.addEventListener("click", function () {
        if (window.history.length > 1) {
          window.history.back();
        } else {
          window.location.href = `/${lang}/`;
        }
      });
    }

    if (contactForm) {
      contactForm.addEventListener("submit", async function (e) {
        e.preventDefault();
        
        successMessage.classList.add("hidden");
        errorMessage.classList.add("hidden");
        
        submitButton.disabled = true;
        buttonText.classList.add("hidden");
        loadingSpinner.classList.remove("hidden");

        const firstNameInput = document.getElementById("hs-firstname-contacts");
        const lastNameInput = document.getElementById("hs-lastname-contacts");
        const emailInput = document.getElementById("hs-email-contacts");
        const reasonSelect = document.getElementById("contact-reason");
        const detailsTextarea = document.getElementById("hs-about-contacts");

        const firstName = firstNameInput?.value?.trim() || "";
        const lastName = lastNameInput?.value?.trim() || "";
        const email = emailInput?.value?.trim() || "";
        const reason = reasonSelect?.value || "";
        const details = detailsTextarea?.value?.trim() || "";

        if (!firstName || !lastName || !email || !reason || !details) {
          errorText.textContent = "Por favor, completa todos los campos requeridos.";
          errorMessage.classList.remove("hidden");
          submitButton.disabled = false;
          buttonText.classList.remove("hidden");
          loadingSpinner.classList.add("hidden");
          return;
        }

        const data = {
          firstName: firstName,
          lastName: lastName,
          email: email,
          reason: reason,
          details: details
        };

        try {
          const response = await fetch("https://peekvisor-form.vercel.app/api/contact", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(data),
          });

          const result = await response.json();

          if (response.ok && result.success) {
            successMessage.classList.remove("hidden");
            contactForm.reset();
          } else {
            errorText.textContent = result.error || "Hubo un error al enviar el mensaje. Por favor, inténtalo de nuevo.";
            errorMessage.classList.remove("hidden");
          }
        } catch (error) {
          console.error("Error:", error);
          errorText.textContent = "Error de conexión. Por favor, verifica tu conexión a internet e inténtalo de nuevo.";
          errorMessage.classList.remove("hidden");
        } finally {
          submitButton.disabled = false;
          buttonText.classList.remove("hidden");
          loadingSpinner.classList.add("hidden");
        }
      });
    }
  });
</script>