---
import MainLayout from "@/layouts/MainLayout.astro";
import { eq } from "drizzle-orm";
import { db } from "../../db/index";
import { sessions, users } from "../../db/schema";
import { getLangFromUrl, useTranslations } from "../../i18n/utils";
import Icon from "@components/ui/icons/Icon.astro";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

let userPlan = 'basic';
const sessionToken = Astro.cookies.get("app_auth_token")?.value;

if (sessionToken) {
  const userInfo = await db.query.sessions.findFirst({
    where: eq(sessions.id, sessionToken),
    with: {
      user: {
        columns: {
          plan: true
        }
      }
    }
  });
  
  if (userInfo?.user?.plan) {
    userPlan = userInfo.user.plan;
  }
}

const plans = [
  {
    id: 'basic',
    name: t('pricing.basic.name'),
    description: t('pricing.basic.description'),
    price: t('pricing.free'),
    priceAmount: 0,
    popular: false,
    features: [
      { text: `1 ${t('pricing.features.website')}`, included: true },
      { text: `30 ${t('pricing.features.days')} ${t('pricing.features.dataRetention')}`, included: true },
      { text: t('pricing.features.pageViews'), included: true },
      { text: t('pricing.features.coreAnalytics'), included: true },
      { text: t('pricing.features.basicExport'), included: true },
      { text: t('pricing.features.co2Reporting'), included: false },
      { text: t('pricing.features.customEvents'), included: false },
      { text: t('pricing.features.emailReports'), included: false },
      { text: t('pricing.features.customSubdomains'), included: false },
      { text: t('pricing.features.apiAccess'), included: false }
    ]
  },
  {
    id: 'flex',
    name: t('pricing.flex.name'),
    description: t('pricing.flex.description'),
    price: '$12',
    priceAmount: 12,
    popular: true,
    features: [
      { text: `5 ${t('pricing.features.websites')}`, included: true },
      { text: `6 ${t('pricing.features.months')} ${t('pricing.features.dataRetention')}`, included: true },
      { text: t('pricing.features.pageViews'), included: true },
      { text: t('pricing.features.coreAnalytics'), included: true },
      { text: t('pricing.features.customEvents'), included: true },
      { text: t('pricing.features.utmTracking'), included: true },
      { text: t('pricing.features.dataExport'), included: true },
      { text: t('pricing.features.emailReports'), included: true },
      { text: t('pricing.features.co2Reporting'), included: false },
      { text: t('pricing.features.customSubdomains'), included: false },
      { text: t('pricing.features.apiAccess'), included: false }
    ]
  },
  {
    id: 'pro',
    name: t('pricing.pro.name'),
    description: t('pricing.pro.description'),
    price: '$15',
    priceAmount: 15,
    popular: false,
    features: [
      { text: `${t('pricing.unlimited')} ${t('pricing.features.websites')}`, included: true },
      { text: `${t('pricing.unlimited')} ${t('pricing.features.dataRetention')}`, included: true },
      { text: t('pricing.features.pageViews'), included: true },
      { text: `${t('pricing.included')} Flex ${t('pricing.plus')}`, included: true, highlight: true },
      { text: t('pricing.features.co2Reporting'), included: true },
      { text: t('pricing.features.apiAccess'), included: true },
      { text: t('pricing.features.customSubdomains'), included: true },
      { text: t('pricing.features.publicDashboards'), included: true },
      { text: t('pricing.features.prioritySupport'), included: true }
    ]
  }
];
---

<MainLayout 
  title={t('pricing.pageTitle')}
  customDescription={t('pricing.metaDescription')}
  customOgTitle={t('pricing.ogTitle')}
>
  <section class="py-16 sm:py-20">
    <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
      <div class="text-center mb-16">
        <h1 class="text-4xl font-bold text-neutral-800 dark:text-neutral-200 tracking-tight mb-4">
          {t('pricing.title')}
        </h1>
        <p class="text-lg text-neutral-600 dark:text-neutral-400 max-w-2xl mx-auto">
          {t('pricing.subtitle')}
        </p>
      </div>
      <div class="grid grid-cols-1 lg:grid-cols-3 gap-8 max-w-6xl mx-auto">
        {plans.map((plan) => (
          <div class={`relative bg-white dark:bg-neutral-800 rounded-2xl border-2 transition-all duration-300 hover:shadow-xl ${
            plan.popular 
              ? 'border-brand-coral shadow-lg scale-105' 
              : 'border-neutral-200 dark:border-neutral-700 hover:border-neutral-300 dark:hover:border-neutral-600'
          }`}>
            
            {/* Popular Badge */}
            {plan.popular && (
              <div class="absolute -top-4 left-1/2 transform -translate-x-1/2">
                <span class="bg-brand-coral text-white px-4 py-1 rounded-full text-sm font-medium">
                  {t('pricing.mostPopular')}
                </span>
              </div>
            )}

            <div class="p-8">
              <!-- Plan Header -->
              <div class="text-center mb-8">
                <h3 class="text-2xl font-bold text-neutral-800 dark:text-neutral-200 mb-2">
                  {plan.name}
                </h3>
                <p class="text-neutral-600 dark:text-neutral-400 text-sm mb-6">
                  {plan.description}
                </p>
                
                <!-- Price -->
                <div class="mb-6">
                  <span class="text-4xl font-bold text-neutral-800 dark:text-neutral-200">
                    {plan.price}
                  </span>
                  {plan.priceAmount > 0 && (
                    <span class="text-neutral-600 dark:text-neutral-400 text-lg">
                      {t('pricing.perMonth')}
                    </span>
                  )}
                </div>

                <!-- CTA Button -->
                <button 
                  class={`w-full py-3 px-6 rounded-lg font-medium transition-all duration-200 ${
                    userPlan === plan.id
                      ? 'bg-neutral-100 dark:bg-neutral-700 text-neutral-600 dark:text-neutral-400 cursor-not-allowed'
                      : plan.popular
                        ? 'bg-brand-coral text-white hover:bg-brand-coral/90 shadow-lg hover:shadow-xl'
                        : 'bg-neutral-800 dark:bg-neutral-700 text-white hover:bg-neutral-700 dark:hover:bg-neutral-600'
                  }`}
                  disabled={userPlan === plan.id}
                >
                  {userPlan === plan.id 
                    ? t('pricing.currentPlan')
                    : plan.priceAmount === 0 
                      ? t('pricing.getStarted')
                      : t('pricing.subscribe')
                  }
                </button>
              </div>

              <!-- Features List -->
              <div class="space-y-4">
                {plan.features.map((feature) => (
                  <div class="flex items-start space-x-3">
                    <div class="flex-shrink-0 mt-0.5">
                      {feature.included ? (
                        <div class="w-5 h-5 bg-green-100 dark:bg-green-900/30 rounded-full flex items-center justify-center">
                          <svg class="w-3 h-3 text-green-600 dark:text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                          </svg>
                        </div>
                      ) : (
                        <div class="w-5 h-5 bg-neutral-100 dark:bg-neutral-700 rounded-full flex items-center justify-center">
                          <svg class="w-3 h-3 text-neutral-400 dark:text-neutral-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                          </svg>
                        </div>
                      )}
                    </div>
                    <span class={`text-sm ${
                      feature.included 
                        ? (feature as any).highlight 
                          ? 'text-brand-coral font-medium' 
                          : 'text-neutral-700 dark:text-neutral-300'
                        : 'text-neutral-500 dark:text-neutral-400'
                    }`}>
                      {feature.text}
                    </span>
                  </div>
                ))}
              </div>
            </div>
          </div>
        ))}
      </div>

      <div class="flex justify-center mt-16">
        <button 
          id="back-button"
          class="btn-gradient hover:btn-gradient-hover px-6 py-3 rounded-lg font-medium text-white text-sm sm:text-base transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
        >
          {t('ui.goBack')}
        </button>
      </div>
    </div>
  </section>

  <script define:vars={{ lang }} is:inline>
    document.addEventListener('DOMContentLoaded', function() {
      const backButton = document.getElementById('back-button');
      
      if (backButton) {
        backButton.addEventListener('click', function() {
          if (window.history.length > 1) {
            window.history.back();
          } else {
            window.location.href = `/${lang}/`;
          }
        });
      }
    });
  </script>
</MainLayout>