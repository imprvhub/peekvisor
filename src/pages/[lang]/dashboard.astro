---
import MainLayout from "../../layouts/MainLayout.astro";
import { getLangFromUrl, useTranslations } from "../../i18n/utils";
import { eq } from "drizzle-orm";
import { db } from "../../db/index";
import { sessions } from "../../db/schema";
import Icon from "@components/ui/icons/Icon.astro";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const sessionToken = Astro.cookies.get("app_auth_token")?.value;
if (!sessionToken) return Astro.redirect(`/${lang}/`);

const userInfo = await db.query.sessions.findFirst({
  where: eq(sessions.id, sessionToken),
  with: {
    user: true,
  },
});

if (!userInfo?.user) return Astro.redirect(`/${lang}/`);

const user = userInfo.user;
let userWebsites: any[] = [];
try {
  const backendUrl = import.meta.env.BACKEND_API_URL || 'https://peekvisor.vercel.app';
  const response = await fetch(`${backendUrl}/api/websites`, {
    headers: {
      'Authorization': `Bearer ${sessionToken}`,
      'Content-Type': 'application/json'
    }
  });
  
  if (response.ok) {
    const data = await response.json();
    userWebsites = data.websites || [];
  }
} catch (error) {
  console.error('Failed to fetch websites from backend:', error);
}

const websiteCount = userWebsites.length;
let userPlan: string = 'basic';
let websiteLimit = 1;
let canAddMore = true;
let planLabelKey = 'dashboard.planCard.basicPlan';
let manageOrUpgradeKey = 'dashboard.planCard.upgrade';
try {
  const backendUrl = import.meta.env.BACKEND_API_URL || 'https://peekvisor.vercel.app';
  const profileRes = await fetch(`${backendUrl}/api/user/profile`, {
    headers: {
      'Authorization': `Bearer ${sessionToken}`,
      'Content-Type': 'application/json'
    }
  });
  if (profileRes.ok) {
    const profile = await profileRes.json();
    userPlan = (profile?.user?.plan as string) || 'basic';
    const max = Number(profile?.planLimits?.max_websites ?? 1);
    const normalizedLimit = max < 0 ? Number.POSITIVE_INFINITY : max;
    websiteLimit = isNaN(normalizedLimit) ? 1 : normalizedLimit;
    canAddMore = websiteCount < websiteLimit;
    switch (userPlan) {
      case 'pro':
        planLabelKey = 'dashboard.planCard.proPlan';
        manageOrUpgradeKey = 'dashboard.planCard.manage';
        break;
      case 'flex':
        planLabelKey = 'dashboard.planCard.flexPlan';
        manageOrUpgradeKey = 'dashboard.planCard.upgrade';
        break;
      default:
        planLabelKey = 'dashboard.planCard.basicPlan';
        manageOrUpgradeKey = 'dashboard.planCard.upgrade';
    }
  }
} catch (error) {
  console.error('Failed to fetch user profile from backend:', error);
  canAddMore = websiteCount < websiteLimit;
}

let buttonSubtitle;
let buttonAction: "modal" | "redirect" = "modal";
let buttonHref = "";

const reachedBasicLimit = userPlan === "basic" && websiteCount >= 1;
const reachedFlexLimit = userPlan === "flex" && websiteCount >= 5;

if (reachedBasicLimit || reachedFlexLimit) {
  buttonSubtitle = t("seePricing");
  buttonAction = "redirect";
  buttonHref = `/${lang}/pricing`;
} else {
  if (websiteCount === 0) {
    buttonSubtitle = t("dashboard.quickActions.noWebsitesYet");
  } else {
    buttonSubtitle = "Add another";
  }
}
---

<MainLayout
  title={t("dashboard.pageTitle")}
  customDescription="Your PeekVisor analytics dashboard"
>
  <div class="min-h-screen">
    <div class="mx-auto max-w-7xl px-6 py-8 lg:px-8">
      <!-- Header -->
      <div class="mb-8">
        <h1
          class="text-3xl font-bold tracking-tight text-neutral-900 dark:text-neutral-100"
        >
          {t("dashboard.title")}
        </h1>
        <p class="mt-2 text-lg text-neutral-600 dark:text-neutral-400">
          {t("dashboard.welcome")}, {user.fullName}
        </p>
      </div>

      <!-- Stats Overview -->
      <div class="mb-8 grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3">
        <!-- Websites Count -->
        <div
          class="rounded-xl border border-neutral-200 bg-white p-6 shadow-sm dark:border-neutral-700 dark:bg-neutral-800"
        >
          <div class="flex items-center">
            <div
              class="flex h-12 w-12 items-center justify-center rounded-lg bg-neutral-100 dark:bg-neutral-700"
            >
              <div class="text-neutral-700 dark:text-neutral-300">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-6 h-6 shrink-0"><path d="M12.83 2.18a2 2 0 0 0-1.66 0L2.6 6.08a1 1 0 0 0 0 1.83l8.58 3.91a2 2 0 0 0 1.66 0l8.58-3.9a1 1 0 0 0 0-1.83z"></path><path d="M2 12a1 1 0 0 0 .58.91l8.6 3.91a2 2 0 0 0 1.65 0l8.58-3.9A1 1 0 0 0 22 12"></path><path d="M2 17a1 1 0 0 0 .58.91l8.6 3.91a2 2 0 0 0 1.65 0l8.58-3.9A1 1 0 0 0 22 17"></path></svg>
              </div>
            </div>
            <div class="ml-4">
              <p
                class="text-sm font-medium text-neutral-600 dark:text-neutral-400"
              >
                {t("dashboard.usage.websitesUsed")}
              </p>
              <p
                class="text-2xl font-bold text-neutral-900 dark:text-neutral-100"
              >
                {websiteCount}
              </p>
            </div>
          </div>
        </div>

        <!-- Current Plan -->
        <div
          class="rounded-xl border border-neutral-200 bg-white p-6 shadow-sm dark:border-neutral-700 dark:bg-neutral-800"
        >
          <div class="flex items-center">
            <div
              class="flex h-12 w-12 items-center justify-center rounded-lg bg-neutral-100 dark:bg-neutral-700"
            >
              <div class="text-neutral-700 dark:text-neutral-300">
                <Icon name="verified" />
              </div>
            </div>
            <div class="ml-4">
              <p
                class="text-sm font-medium text-neutral-600 dark:text-neutral-400"
              >
                {t("dashboard.planCard.title")}
              </p>
              <p
                class="text-2xl font-bold text-neutral-900 dark:text-neutral-100"
              >
                {t(planLabelKey)}
              </p>
            </div>
          </div>
        </div>

        <!-- Quick Access -->
        <div
          class="rounded-xl border border-neutral-200 bg-white p-6 shadow-sm dark:border-neutral-700 dark:bg-neutral-800"
        >
          <div class="flex items-center">
            <div
              class="flex h-12 w-12 items-center justify-center rounded-lg bg-neutral-100 dark:bg-neutral-700"
            >
              <div class="text-neutral-700 dark:text-neutral-300">
                <Icon name="realtime" />
              </div>
            </div>
            <div class="ml-4">
              <p
                class="text-sm font-medium text-neutral-600 dark:text-neutral-400"
              >
                {t("dashboard.recentActivity.title")}
              </p>
              <p
                class="text-2xl font-bold text-neutral-900 dark:text-neutral-100"
              >
                {websiteCount > 0 ? "Active" : "None"}
              </p>
            </div>
          </div>
        </div>
      </div>

      <!-- Quick Actions -->
      <div class="mb-8">
        <h2
          class="mb-6 text-xl font-semibold text-neutral-900 dark:text-neutral-100"
        >
          {t("dashboard.quickActions.title")}
        </h2>
        <div class="grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-4">
          <!-- Add Domain Button -->
          {
            buttonAction === "redirect" ? (
              <a href={buttonHref} class="btn-add-website group">
                <div class="flex h-10 w-10 items-center justify-center rounded-lg bg-white/20 group-hover:bg-white/30 transition-colors duration-300">
                  <Icon name="plus" />
                </div>
                <div class="ml-3 text-left">
                  <p class="text-sm font-medium">
                    {t("dashboard.quickActions.addWebsite")}
                  </p>
                  <p class="text-xs opacity-80">{buttonSubtitle}</p>
                </div>
              </a>
            ) : (
              <button id="add-website-btn" class="btn-add-website group">
                <div class="flex h-10 w-10 items-center justify-center rounded-lg bg-white/20 group-hover:bg-white/30 transition-colors duration-300">
                  <Icon name="plus" />
                </div>
                <div class="ml-3 text-left">
                  <p class="text-sm font-medium">
                    {t("dashboard.quickActions.addWebsite")}
                  </p>
                  <p class="text-xs opacity-80">{buttonSubtitle}</p>
                </div>
              </button>
            )
          }
          <!-- Settings -->
          <a
            href={`/${lang}/settings`}
            class="group flex items-center rounded-xl border border-neutral-200 bg-white p-4 transition-all hover:bg-neutral-50 hover:shadow-sm dark:border-neutral-700 dark:bg-neutral-800 dark:hover:bg-neutral-700/40"
          >
            <div
              class="flex h-10 w-10 items-center justify-center rounded-lg bg-neutral-100 group-hover:bg-neutral-200 dark:bg-neutral-700 dark:group-hover:bg-neutral-600"
            >
              <div class="text-neutral-700 dark:text-neutral-300">
                <Icon name="settings" />
              </div>
            </div>
            <div class="ml-3">
              <p
                class="text-sm font-medium text-neutral-900 dark:text-neutral-100"
              >
                {t("settings.title")}
              </p>
              <p class="text-xs text-neutral-500 dark:text-neutral-400">
                {t("dashboard.userCard.viewSettings")}
              </p>
            </div>
          </a>

          <!-- Pricing -->
          <a
            href={`/${lang}/pricing`}
            class="group flex items-center rounded-xl border border-neutral-200 bg-white p-4 transition-all hover:bg-neutral-50 hover:shadow-sm dark:border-neutral-700 dark:bg-neutral-800 dark:hover:bg-neutral-700/40"
          >
            <div
              class="flex h-10 w-10 items-center justify-center rounded-lg bg-neutral-100 group-hover:bg-neutral-200 dark:bg-neutral-700 dark:group-hover:bg-neutral-600"
            >
              <div class="text-neutral-700 dark:text-neutral-300">
                <Icon name="rocket" />
              </div>
            </div>
            <div class="ml-3">
              <p
                class="text-sm font-medium text-neutral-900 dark:text-neutral-100"
              >
                {t(manageOrUpgradeKey)}
              </p>
              <p class="text-xs text-neutral-500 dark:text-neutral-400">
                {t("nav.pricing")}
              </p>
            </div>
          </a>
        </div>
      </div>
      <h2
          class="mb-6 text-xl font-semibold text-neutral-900 dark:text-neutral-100"
        >
          {t("websites.title")}
        </h2>
      <div class="grid grid-cols-1 gap-8 sm:grid-cols-2 lg:grid-cols-3">
        
         {userWebsites.map((website: any) => (
         <div class="group rounded-2xl border border-neutral-200 bg-white p-8 shadow-sm transition-all duration-200 hover:shadow-lg hover:scale-105 dark:border-neutral-700 dark:bg-neutral-800 dark:hover:bg-neutral-700/40 relative">
           <div class="absolute top-4 right-4">
             <div class="relative">
               <button 
                 class="settings-menu-btn p-2 rounded-lg hover:bg-neutral-100 dark:hover:bg-neutral-700 transition-colors"
                 data-website-id={website.id}
                 data-website-name={website.name}
                 data-website-domain={website.domain}
               >
                 <Icon name="settingsCard" />
               </button>

               <div class="settings-dropdown absolute right-0 top-12 w-48 bg-white dark:bg-neutral-800 border border-neutral-200 dark:border-neutral-700 rounded-xl shadow-lg z-10 hidden">
                 <div class="p-2">
                   <button
                     class="test-connection-btn w-full flex items-center gap-3 px-3 py-2 text-sm text-neutral-700 dark:text-neutral-300 hover:bg-neutral-100 dark:hover:bg-neutral-700 rounded-lg transition-colors"
                     data-website-id={website.id}
                     data-domain={website.domain}
                   >
                     <Icon name="check" />
                     Test Connection
                   </button>
                   <button
                     class="delete-website-btn w-full flex items-center gap-3 px-3 py-2 text-sm text-red-600 dark:text-red-400 hover:bg-red-50 dark:hover:bg-red-900/20 rounded-lg transition-colors"
                     data-website-id={website.id}
                     data-website-name={website.name}
                     data-website-domain={website.domain}
                   >
                     <Icon name="trash" />
                     Delete Website
                   </button>
                 </div>
               </div>
             </div>
           </div>

           <div class="flex items-start justify-between">
             <div class="flex-1 min-w-0">
               <div class="flex items-center gap-4 mb-6">
                 <div class="relative flex h-14 w-14 items-center justify-center rounded-xl bg-neutral-100 dark:bg-neutral-700 overflow-hidden">
                   <img
                     class="website-favicon h-8 w-8 rounded absolute hidden"
                     data-domain={website.domain}
                     alt={`${website.name} favicon`}
                   />
                   <div class="website-fallback-icon text-neutral-700 dark:text-neutral-300 flex items-center justify-center">
                     <svg class="w-6 h-6" width="24" height="24" viewBox="0 -960 960 960" fill="currentColor">
                       <path d="M480-80q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Zm-40-82v-78q-33 0-56.5-23.5T360-320v-40L168-552q-3 18-5.5 36t-2.5 36q0 121 79.5 212T440-162Zm276-102q20-22 36-47.5t26.5-53q10.5-27.5 16-56.5t5.5-59q0-98-54.5-179T600-776v16q0 33-23.5 56.5T520-680h-80v80q0 17-11.5 28.5T400-560h-80v80h240q17 0 28.5 11.5T600-440v120h40q26 0 47 15.5t29 40.5Z"/>
                     </svg>
                   </div>
                 </div>
                 <div class="flex-1 min-w-0">
                   <h3 class="text-lg font-semibold text-neutral-900 dark:text-neutral-100 truncate mb-1">
                     {website.name}
                   </h3>
                   <p class="text-sm text-neutral-500 dark:text-neutral-400 truncate">
                     {website.domain}
                   </p>
                 </div>
               </div>
               
               <div class="space-y-3">
                <a 
                   href={`/${lang}/analytics/${website.id}`}
                   class="flex w-full items-center justify-center gap-2 rounded-xl border border-neutral-300 px-4 py-3 text-sm font-medium text-neutral-800 dark:text-neutral-200 transition-all duration-200 hover:bg-neutral-100 hover:scale-105 active:scale-95 dark:border-neutral-600 dark:hover:bg-neutral-700"
                 >
                   <div class="text-neutral-700 dark:text-neutral-300">
                     <Icon name="analytics" />
                   </div>
                   {t("websites.viewAnalytics")}
                 </a>
                 
                 <div class="grid grid-cols-2 gap-2">
                   <button
                     class="tracking-code-btn flex items-center justify-center gap-2 rounded-xl border border-neutral-300 px-3 py-3 text-xs font-medium text-neutral-800 dark:text-neutral-200 transition-all duration-200 hover:bg-neutral-100 hover:scale-105 active:scale-95 dark:border-neutral-600 dark:hover:bg-neutral-700"
                     data-website-id={website.id}
                   >
                     <div class="text-neutral-700 dark:text-neutral-300">
                       <Icon name="code" />
                     </div>
                     <span class="hidden sm:inline">{t("websites.trackingCode")}</span>
                     <span class="sm:hidden">Code</span>
                   </button>
                   
                   <button
                     class="test-connection-btn flex items-center justify-center gap-2 rounded-xl border border-neutral-300 px-3 py-3 text-xs font-medium text-neutral-800 dark:text-neutral-200 transition-all duration-200 hover:bg-neutral-100 hover:scale-105 active:scale-95 dark:border-neutral-600 dark:hover:bg-neutral-700"
                     data-website-id={website.id}
                     data-domain={website.domain}
                   >
                     <div class="text-neutral-700 dark:text-neutral-300">
                       <Icon name="check" />
                     </div>
                     <span class="hidden sm:inline">Test</span>
                     <span class="sm:hidden">Test</span>
                   </button>
                 </div>
               </div>
             </div>
           </div>
         </div>
         ))}
       </div>

    </div>
  </div>

  <!-- Add Domain Modal -->
   <div
     id="add-website-modal"
     class="fixed inset-0 z-50 hidden bg-neutral-900/50 backdrop-blur-sm"
   >
     <div class="flex min-h-screen items-center justify-center p-4">
       <div
         class="w-full max-w-md rounded-2xl border border-neutral-200 bg-white shadow-xl dark:border-neutral-700 dark:bg-neutral-800"
       >
         <div class="p-8">
           <div class="mb-6 flex items-center justify-between">
             <h3 class="text-xl font-semibold text-neutral-900 dark:text-neutral-100">
               {t("websites.modal.title")}
             </h3>
             <button
               id="close-modal-btn"
               class="rounded-xl p-2 text-neutral-400 transition-colors hover:bg-neutral-100 hover:text-neutral-600 dark:hover:bg-neutral-700 dark:hover:text-neutral-300"
             >
               <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                 <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
               </svg>
             </button>
           </div>
           <form id="add-website-form">
             <div class="mb-6">
               <label
                 for="domain"
                 class="mb-3 block text-sm font-medium text-neutral-700 dark:text-neutral-300"
               >
                 {t("websites.modal.domain")}
               </label>
               <input
                 type="text"
                 id="domain"
                 name="domain"
                 placeholder={t("websites.modal.domainPlaceholder")}
                 class="w-full rounded-xl border border-neutral-300 px-4 py-3 transition-colors focus:border-blue-500 focus:ring-2 focus:ring-blue-500/20 dark:border-neutral-600 dark:bg-neutral-700 dark:text-neutral-100 dark:focus:border-blue-400"
                 required
               />
             </div>
             <div class="mb-8">
               <label
                 for="name"
                 class="mb-3 block text-sm font-medium text-neutral-700 dark:text-neutral-300"
               >
                 {t("websites.modal.name")}
               </label>
               <input
                 type="text"
                 id="name"
                 name="name"
                 placeholder={t("websites.modal.namePlaceholder")}
                 class="w-full rounded-xl border border-neutral-300 px-4 py-3 transition-colors focus:border-blue-500 focus:ring-2 focus:ring-blue-500/20 dark:border-neutral-600 dark:bg-neutral-700 dark:text-neutral-100 dark:focus:border-blue-400"
                 required
               />
             </div>
             <div class="flex justify-end space-x-4">
               <button
                 type="button"
                 id="cancel-add-website"
                 class="rounded-xl px-6 py-3 text-neutral-800 dark:text-neutral-200 bg-neutral-200 dark:bg-neutral-700 transition-all duration-200 hover:bg-neutral-300 dark:hover:bg-neutral-600 hover:scale-105 active:scale-95"
               >
                 {t("websites.modal.cancel")}
               </button>
               <button
                 type="submit"
                 class="rounded-xl bg-neutral-900 dark:bg-neutral-100 px-6 py-3 text-white dark:text-neutral-900 transition-all duration-200 hover:bg-neutral-800 dark:hover:bg-white hover:scale-105 active:scale-95"
               >
                 {t("websites.modal.add")}
               </button>
             </div>
           </form>
         </div>
       </div>
     </div>
   </div>

   <!-- Delete Website Modal -->
   <div
     id="delete-website-modal"
     class="fixed inset-0 z-50 hidden bg-neutral-900/50 backdrop-blur-sm"
   >
     <div class="flex min-h-screen items-center justify-center p-4">
       <div
         class="w-full max-w-md rounded-2xl border border-red-200 bg-white shadow-xl dark:border-red-700 dark:bg-neutral-800"
       >
         <div class="p-8">
           <div class="mb-6 flex items-center justify-between">
             <h3 class="text-xl font-semibold text-red-900 dark:text-red-100">
               {t("websites.deleteModal.title")}
             </h3>
             <button
               id="close-delete-modal-btn"
               class="rounded-xl p-2 text-red-400 transition-colors hover:bg-red-100 hover:text-red-600 dark:hover:bg-red-900/30 dark:hover:text-red-300"
             >
               <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                 <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
               </svg>
             </button>
           </div>
           
           <div class="mb-6 rounded-lg border border-red-200 bg-red-50 p-4 dark:border-red-800 dark:bg-red-900/20">
             <p id="delete-warning-text" class="text-sm text-red-800 dark:text-red-200"></p>
           </div>
           
           <form id="delete-website-form">
             <div class="mb-6">
               <label
                 for="delete-domain-confirmation"
                 class="mb-3 block text-sm font-medium text-red-700 dark:text-red-300"
                 id="delete-confirmation-label"
               ></label>
               <input
                 type="text"
                 id="delete-domain-confirmation"
                 name="domain-confirmation"
                 class="w-full rounded-xl border border-red-300 px-4 py-3 transition-colors focus:border-red-500 focus:ring-2 focus:ring-red-500/20 dark:border-red-600 dark:bg-neutral-700 dark:text-neutral-100 dark:focus:border-red-400"
                 required
               />
             </div>
             <div class="flex justify-end space-x-4">
               <button
                 type="button"
                 id="cancel-delete-website"
                 class="rounded-xl px-6 py-3 text-neutral-800 dark:text-neutral-200 bg-neutral-200 dark:bg-neutral-700 transition-all duration-200 hover:bg-neutral-300 dark:hover:bg-neutral-600 hover:scale-105 active:scale-95"
               >
                 {t("websites.deleteModal.cancel")}
               </button>
               <button
                 type="submit"
                 id="confirm-delete-btn"
                 disabled
                 class="rounded-xl bg-red-600 px-6 py-3 text-white transition-all duration-200 hover:bg-red-700 hover:scale-105 active:scale-95 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:scale-100"
               >
                 {t("websites.deleteModal.confirm")}
               </button>
             </div>
           </form>
         </div>
       </div>
     </div>
   </div>

  <script>
    import { apiClient } from '../../utils/api-client.ts';
    import { createTrackingModal } from '../../utils/tracking-modal.ts';

    document.addEventListener('DOMContentLoaded', () => {
      loadFavicons();
    });

    function loadFavicons() {
        const faviconImages = document.querySelectorAll('.website-favicon');
        
        faviconImages.forEach((img: Element, index: number) => {
          const domain = img.getAttribute('data-domain');
          const fallback = img.parentElement?.querySelector('.website-fallback-icon');
          
          if (!domain || !fallback) return;
          fallback.classList.remove('hidden');
          img.classList.add('hidden');
          
          const cleanDomain = domain.replace(/^https?:\/\//, '').replace(/^www\./, '');

          const faviconUrls = [
            `https://${cleanDomain}/favicon.ico`,
            `https://${cleanDomain}/favicon.png`,
            `https://${cleanDomain}/apple-touch-icon.png`,
            `https://${cleanDomain}/apple-touch-icon-precomposed.png`,
            `https://${cleanDomain}/icon.png`
          ];
          
          let currentIndex = 0;
          
          function tryNextFavicon() {
            if (currentIndex >= faviconUrls.length) {
              console.log(`⚠️ No favicon found for ${domain}, keeping fallback`);
              return;
            }
            
            const tempImg = new Image();
            
            tempImg.onload = () => {
              if (tempImg.width >= 24 && tempImg.height >= 24) {
                img.setAttribute('src', faviconUrls[currentIndex]);
                img.classList.remove('hidden');
                if (fallback) {
                  fallback.classList.add('hidden');
                }
                console.log(`✅ Favicon loaded for ${domain} from ${faviconUrls[currentIndex]}`);
              } else {
                console.log(`⚠️ Favicon too small for ${domain} from ${faviconUrls[currentIndex]}, trying next...`);
                currentIndex++;
                tryNextFavicon();
              }
            };
            
            tempImg.onerror = () => {
              currentIndex++;
              tryNextFavicon();
            };
            
            tempImg.src = faviconUrls[currentIndex];
          }
          
          tryNextFavicon();
        });
      }
    document
      .getElementById("add-website-btn")
      ?.addEventListener("click", openModal);
    document
      .getElementById("add-first-website-btn")
      ?.addEventListener("click", openModal);
    document
      .getElementById("cancel-add-website")
      ?.addEventListener("click", closeModal);
    document
      .getElementById("close-modal-btn")
      ?.addEventListener("click", closeModal);
    document
      .getElementById("add-website-form")
      ?.addEventListener("submit", addWebsite);

    document.addEventListener("click", (e) => {
      const target = e.target as HTMLElement;
      if (target.classList.contains("tracking-code-btn") || target.closest(".tracking-code-btn")) {
        const button = target.classList.contains("tracking-code-btn") ? target : target.closest(".tracking-code-btn");
        const websiteId = button?.getAttribute("data-website-id");
        if (websiteId) {
          showTrackingCode(websiteId);
        }
      }
      
      if (target.classList.contains("test-connection-btn") || target.closest(".test-connection-btn")) {
        const button = target.classList.contains("test-connection-btn") ? target : target.closest(".test-connection-btn");
        const websiteId = button?.getAttribute("data-website-id");
        const domain = button?.getAttribute("data-domain");
        if (websiteId && domain) {
          testConnection(websiteId, domain);
        }
      }
    });

        document.addEventListener("click", (e) => {
      const target = e.target as HTMLElement;
      
      if (target.classList.contains("delete-website-btn") || target.closest(".delete-website-btn")) {
        const button = target.classList.contains("delete-website-btn") ? target : target.closest(".delete-website-btn");
        const websiteId = button?.getAttribute("data-website-id");
        const websiteName = button?.getAttribute("data-website-name");
        const websiteDomain = button?.getAttribute("data-website-domain");
        
        if (websiteId && websiteName && websiteDomain) {
          showDeleteConfirmation(websiteId, websiteName, websiteDomain);
        }
      }
    });

      document.addEventListener("click", (e) => {
        const target = e.target as HTMLElement;
        if (target.classList.contains("settings-menu-btn") || target.closest(".settings-menu-btn")) {
          e.stopPropagation();
          const button = target.classList.contains("settings-menu-btn") ? target : target.closest(".settings-menu-btn");
          const dropdown = button?.nextElementSibling;
          document.querySelectorAll('.settings-dropdown').forEach(dd => {
            if (dd !== dropdown) dd.classList.add('hidden');
          });
          
          dropdown?.classList.toggle('hidden');
        }
        else {
          document.querySelectorAll('.settings-dropdown').forEach(dd => {
            dd.classList.add('hidden');
          });
        }
      });

      document.addEventListener("click", (e) => {
        const target = e.target as HTMLElement;
        if (target.closest(".settings-dropdown .test-connection-btn")) {
          const button = target.closest(".test-connection-btn");
          const websiteId = button?.getAttribute("data-website-id");
          const domain = button?.getAttribute("data-domain");
          if (websiteId && domain) {
            testConnection(websiteId, domain);
            button?.closest('.settings-dropdown')?.classList.add('hidden');
          }
        }
        if (target.closest(".settings-dropdown .delete-website-btn")) {
          const button = target.closest(".delete-website-btn");
          const websiteId = button?.getAttribute("data-website-id");
          const websiteName = button?.getAttribute("data-website-name");
          const websiteDomain = button?.getAttribute("data-website-domain");
          
          if (websiteId && websiteName && websiteDomain) {
            showDeleteConfirmation(websiteId, websiteName, websiteDomain);
            button?.closest('.settings-dropdown')?.classList.add('hidden');
          }
        }
      });

    document
      .getElementById("add-website-modal")
      ?.addEventListener("click", (e) => {
        if ((e.target as HTMLElement)?.id === "add-website-modal") {
          closeModal();
        }
      });

    document
        .getElementById("cancel-delete-website")
        ?.addEventListener("click", closeDeleteModal);
    document
        .getElementById("close-delete-modal-btn")
        ?.addEventListener("click", closeDeleteModal);
    document
        .getElementById("delete-website-form")
        ?.addEventListener("submit", confirmDeleteWebsite);

    document
      .getElementById("delete-website-modal")
        ?.addEventListener("click", (e) => {
          if ((e.target as HTMLElement)?.id === "delete-website-modal") {
            closeDeleteModal();
          }
    });

      document
      .getElementById("delete-domain-confirmation")
      ?.addEventListener("input", validateDeleteInput);


      let currentDeleteData = { websiteId: "", websiteName: "", websiteDomain: "" };

    function showDeleteConfirmation(websiteId: string, websiteName: string, websiteDomain: string) {
      currentDeleteData = { websiteId, websiteName, websiteDomain };
      
      const modal = document.getElementById("delete-website-modal");
      const warningText = document.getElementById("delete-warning-text");
      const confirmationLabel = document.getElementById("delete-confirmation-label");
      const confirmationInput = document.getElementById("delete-domain-confirmation") as HTMLInputElement;
      const confirmBtn = document.getElementById("confirm-delete-btn") as HTMLButtonElement;
      
      if (warningText) {
        warningText.textContent = `Warning: This action is irreversible. Deleting '${websiteName}' will permanently remove all associated analytics data and cannot be undone.`;
      }
      
      if (confirmationLabel) {
        confirmationLabel.textContent = "To confirm deletion, please type the full domain name:";
      }
      
      if (confirmationInput) {
        confirmationInput.value = "";
        confirmationInput.placeholder = `Type ${websiteDomain} here...`;
      }
      
      if (confirmBtn) {
        confirmBtn.disabled = true;
      }
      
      modal?.classList.remove("hidden");
    }

    function closeDeleteModal() {
      const modal = document.getElementById("delete-website-modal");
      const form = document.getElementById("delete-website-form") as HTMLFormElement;
      
      modal?.classList.add("hidden");
      form?.reset();
      currentDeleteData = { websiteId: "", websiteName: "", websiteDomain: "" };
    }

    function validateDeleteInput() {
      const input = document.getElementById("delete-domain-confirmation") as HTMLInputElement;
      const confirmBtn = document.getElementById("confirm-delete-btn") as HTMLButtonElement;
      
      if (input && confirmBtn) {
        const isValid = input.value.toLowerCase().trim() === currentDeleteData.websiteDomain.toLowerCase().trim();
        confirmBtn.disabled = !isValid;
        
        if (isValid) {
          confirmBtn.classList.remove("opacity-50", "cursor-not-allowed");
          confirmBtn.classList.add("bg-red-600", "hover:bg-red-700");
        } else {
          confirmBtn.classList.add("opacity-50", "cursor-not-allowed");
          confirmBtn.classList.remove("bg-red-600", "hover:bg-red-700");
        }
      }
    }

    async function confirmDeleteWebsite(e: Event) {
      e.preventDefault();
      
      const input = document.getElementById("delete-domain-confirmation") as HTMLInputElement;
      const confirmBtn = document.getElementById("confirm-delete-btn") as HTMLButtonElement;
      
      if (!input || !currentDeleteData.websiteId) return;
      
      const enteredDomain = input.value.toLowerCase().trim();
      const expectedDomain = currentDeleteData.websiteDomain.toLowerCase().trim();
      
      if (enteredDomain !== expectedDomain) {
        alert("Domain name does not match");
        return;
      }
      
      try {
        confirmBtn.disabled = true;
        confirmBtn.textContent = "Deleting...";
        
        await apiClient.deleteWebsite(currentDeleteData.websiteId);
        
        closeDeleteModal();
        const successMsg = document.createElement("div");
        successMsg.className = "fixed top-4 right-4 bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded z-50";
        successMsg.textContent = "Website deleted successfully";
        document.body.appendChild(successMsg);
        
        setTimeout(() => {
          successMsg.remove();
          window.location.reload();
        }, 2000);
        
      } catch (error) {
        console.error("Error deleting website:", error);
        
        const errorMsg = document.createElement("div");
        errorMsg.className = "fixed top-4 right-4 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded z-50";
        errorMsg.textContent = error instanceof Error ? error.message : "Failed to delete website";
        document.body.appendChild(errorMsg);
        
        setTimeout(() => errorMsg.remove(), 5000);
        
        confirmBtn.disabled = false;
        confirmBtn.textContent = "Confirm Deletion";
      }
    }
    function openModal() {
      document.getElementById("add-website-modal")?.classList.remove("hidden");
    }

    function closeModal() {
      document.getElementById("add-website-modal")?.classList.add("hidden");
      (document.getElementById("add-website-form") as HTMLFormElement)?.reset();
    }

    async function addWebsite(e: Event) {
      e.preventDefault();

      const formData = new FormData(e.target as HTMLFormElement);
      const data = {
        domain: formData.get("domain") as string,
        name: formData.get("name") as string,
      };

      try {
        const result = await apiClient.createWebsite(data);
        closeModal();
        window.location.reload();
      } catch (error) {
        console.error("Error adding website:", error);
        alert(error instanceof Error ? error.message : "Error adding website");
      }
    }

    async function showTrackingCode(websiteId: string) {
      try {
        const data = await apiClient.getTrackingCode(websiteId);
        const modal = createTrackingModal(data);
        document.body.appendChild(modal);
      } catch (error) {
        console.error("Error fetching tracking code:", error);
        alert("Error fetching tracking code");
      }
    }

    async function testConnection(websiteId: string, domain: string) {
      const button = document.querySelector(`[data-website-id="${websiteId}"].test-connection-btn`);
      if (!button) return;
      
      const originalContent = button.innerHTML;
      button.innerHTML = `
        <div class="animate-spin h-4 w-4 border-2 border-neutral-600 border-t-transparent rounded-full"></div>
        <span class="hidden sm:inline">Testing...</span>
        <span class="sm:hidden">...</span>
      `;
      
      try {
        const scriptUrl = `https://peekvisor.vercel.app/peekvisor.js`;
        const scriptResponse = await fetch(scriptUrl, { method: 'HEAD' });
        
        if (!scriptResponse.ok) {
          throw new Error('Script not accessible');
        }
        
        const data = await apiClient.getAnalytics(websiteId, 1);
        const hasRecentActivity = data.overview.pageViews > 0;
        
        const modal = document.createElement("div");
        modal.className = "fixed inset-0 bg-neutral-900/50 backdrop-blur-sm z-50 flex items-center justify-center p-4";
        
        const status = hasRecentActivity ? 'success' : 'warning';
        const statusColor = hasRecentActivity ? 'green' : 'yellow';
        
        modal.innerHTML = `
          <div class="bg-white dark:bg-neutral-800 connected-pattern border border-neutral-200 dark:border-neutral-700 rounded-2xl shadow-xl max-w-md w-full">
            <div class="p-8">
              <div class="flex items-center gap-4 mb-6">
                <div class="flex h-12 w-12 items-center justify-center rounded-xl bg-${statusColor}-100 dark:bg-${statusColor}-900/30">
                  <svg class="h-6 w-6 text-neutral-800 dark:text-neutral-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    ${hasRecentActivity ? 
                      '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />' :
                      '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" />'
                    }
                  </svg>
                </div>
                <div>
                  <h3 class="text-xl font-semibold text-neutral-900 dark:text-neutral-100">
                    Connection Test
                  </h3>
                  <p class="text-sm text-neutral-500 dark:text-neutral-400">${domain}</p>
                </div>
              </div>
              
              <div class="space-y-4 mb-8">
                <div class="flex items-center gap-3">
                  <div class="h-3 w-3 rounded-full bg-green-500"></div>
                  <span class="text-sm text-neutral-700 dark:text-neutral-300">Script accessible</span>
                </div>
                <div class="flex items-center gap-3">
                  <div class="h-3 w-3 rounded-full bg-${hasRecentActivity ? 'green' : 'yellow'}-500"></div>
                  <span class="text-sm text-neutral-700 dark:text-neutral-300">
                    ${hasRecentActivity ? 'Recent activity detected' : 'No recent activity (last 24h)'}
                  </span>
                </div>
                <div class="flex items-center gap-3">
                  <div class="h-3 w-3 rounded-full bg-green-500"></div>
                  <span class="text-sm text-neutral-700 dark:text-neutral-300">Analytics endpoint working</span>
                </div>
              </div>
              
              ${!hasRecentActivity ? `
                <div class="bg-yellow-50 dark:bg-yellow-900/20 p-4 rounded-xl border border-yellow-200 dark:border-yellow-800 mb-6">
                  <p class="text-sm text-yellow-800 dark:text-yellow-200">
                    <strong>Tip:</strong> Visit ${domain} to generate test data, then refresh analytics.
                  </p>
                </div>
              ` : ''}
              
             <div class="flex justify-end">
              <button class="close-modal rounded-xl bg-neutral-900 dark:bg-neutral-100 px-6 py-3 text-white dark:text-neutral-900 transition-all duration-200 hover:bg-neutral-800 dark:hover:bg-white hover:scale-105 active:scale-95">
                Close
              </button>
            </div>
            </div>
          </div>
        `;
        
        modal.querySelector('.close-modal')?.addEventListener('click', () => modal.remove());
        modal.addEventListener('click', (e) => {
          if (e.target === modal) modal.remove();
        });
        
        document.body.appendChild(modal);
        
      } catch (error) {
        console.error('Connection test failed:', error);
        const msg = error instanceof Error ? error.message : String(error);
        alert('Connection test failed: ' + msg);
      } finally {
        button.innerHTML = originalContent;
      }
    }

    (window as any).showTrackingCode = showTrackingCode;
    (window as any).testConnection = testConnection;
    document.getElementById("back-button")?.addEventListener("click", () => {
      window.history.back();
    });
  </script>
<style>
  @keyframes gradient-animation {
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
  }

  .btn-add-website {
    display: flex;
    align-items: center;
    padding: 1rem;
    font-weight: 600;
    color: white;
    background-image: linear-gradient(45deg, var(--color-indigo-400), var(--color-indigo-600), #262626);
    background-size: 200% auto;
    border-radius: 0.75rem;
    border: none;
    cursor: pointer;
    transition: all 0.4s cubic-bezier(.25,.4,.25,1);
    box-shadow: 0 4px 15px 0 rgba(77, 25, 204, 0.25);
    animation: gradient-animation 7s ease infinite;
    width: 100%;
  }

  .btn-add-website:hover {
    box-shadow: 0 10px 25px 0 rgba(77, 25, 204, 0.4);
    transform: translateY(-3px);
  }

  .btn-add-website:active {
      transform: translateY(0);
      box-shadow: 0 4px 15px 0 rgba(77, 25, 204, 0.25);
  }
</style>
</MainLayout>
