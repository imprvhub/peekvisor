---
import MainLayout from "@/layouts/MainLayout.astro";
import { eq, desc } from "drizzle-orm";
import { db } from "../../db/index";
import { sessions, users, loginLogs } from "../../db/schema";
import { getLangFromUrl, useTranslations } from "../../i18n/utils";
import { languages } from "../../i18n/ui";
import Icon from "@components/ui/icons/Icon.astro";
import Avatar from "@components/ui/avatars/Avatar.astro";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const sessionToken = Astro.cookies.get("app_auth_token")?.value;
if (!sessionToken) return Astro.redirect("/");

const userInfo = await db.query.sessions.findFirst({
  where: eq(sessions.id, sessionToken),
  with: {
    user: {
      with: {
        oauthTokens: {
          columns: {
            strategy: true,
            accessToken: true,
          },
        },
        loginLogs: {
          orderBy: desc(loginLogs.loggedInAt),
        },
      },
    },
  },
});

const userId = userInfo?.user?.id;
const userEmail = userInfo?.user?.email;
const fullName = userInfo?.user?.fullName;
const profilePhoto = userInfo?.user?.profilePhoto;
const accountCreated = userInfo?.user?.createdAt;

const userData = userId ? await db.query.users.findFirst({
  where: eq(users.id, userId),
  columns: {
    plan: true
  }
}) : null;

const userPlan = userData?.plan || 'basic';
const googleAccessToken = userInfo?.user?.oauthTokens?.find(token => token.strategy === 'google')?.accessToken;

if (!googleAccessToken) {
  return Astro.redirect("/login?error=missing+google+authorization");
}

const allLogs = userInfo?.user?.loginLogs?.sort((a, b) =>
  a.sessionId === sessionToken ? -1 : 1
) || [];

const hasMoreSessions = (userInfo?.user?.loginLogs?.length || 0) > 5;

function capitalizeFirstWord(text: string) {
  if (!text) return '';
  return text.charAt(0).toUpperCase() + text.slice(1);
}
---

<MainLayout title={t('settings.pageTitle')}>
  <section class="py-16 sm:py-20">
      <div class="flex flex-col gap-8">
        <div class="text-center">
          <h1 class="text-4xl font-bold text-neutral-800 dark:text-neutral-200 tracking-tight">
            {t('settings.title')}
          </h1>
        </div>

        <div class="space-y-8">
          <div class="bg-white dark:bg-neutral-800 rounded-xl border border-neutral-200 dark:border-neutral-700 p-6 shadow-lg shadow-neutral-900/20 hover:shadow-xl hover:shadow-neutral-900/20 dark:hover:shadow-white/10 transition-shadow duration-300">
            <h2 class="text-xl font-semibold text-neutral-800 dark:text-neutral-200 mb-6">
              {t('settings.profile.title')}
            </h2>
            
            <div class="space-y-6">
              <div class="flex items-center space-x-6">
                <div class="flex-shrink-0">
                  <Avatar 
                    src={profilePhoto}
                    alt={fullName || userEmail || 'User'}
                    fullName={fullName}
                    size="lg"
                  />
                </div>
                <div class="flex-1">
                  <h3 class="text-lg font-medium text-neutral-800 dark:text-neutral-200 mb-1">
                    {t('settings.profile.personalInfo')}
                  </h3>
                  <div class="space-y-2">
                    <div>
                      <span class="text-sm font-medium text-neutral-600 dark:text-neutral-400">{t('settings.profile.fullName')}:</span>
                      <span class="ml-2 text-sm text-neutral-800 dark:text-neutral-200">{fullName || 'Not provided'}</span>
                    </div>
                    <div>
                      <span class="text-sm font-medium text-neutral-600 dark:text-neutral-400">{t('settings.profile.email')}:</span>
                      <span class="ml-2 text-sm text-neutral-800 dark:text-neutral-200">{userEmail}</span>
                    </div>
                    <div>
                      <span class="text-sm font-medium text-neutral-600 dark:text-neutral-400">{t('settings.profile.memberSince')}:</span>
                      <span class="ml-2 text-sm text-neutral-800 dark:text-neutral-200">
                        {new Date(accountCreated!).toLocaleDateString()}
                      </span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <div class="bg-white dark:bg-neutral-800 rounded-xl border border-neutral-200 dark:border-neutral-700 p-6 shadow-lg shadow-neutral-900/20 hover:shadow-xl hover:shadow-neutral-900/20 dark:hover:shadow-white/10 transition-shadow duration-300">
            <h2 class="text-xl font-semibold text-neutral-800 dark:text-neutral-200 mb-6">
              {t('settings.account.title')}
            </h2>

            <div class="space-y-8">
              <div>
                <h3 class="text-lg font-medium text-neutral-800 dark:text-neutral-200 mb-2">
                  {t('settings.connectedAccounts.title')}
                </h3>
                <p class="text-sm text-neutral-600 dark:text-neutral-400 mb-4">
                  {t('settings.connectedAccounts.description')}
                </p>
                
                {userInfo?.user?.oauthTokens && userInfo?.user?.oauthTokens.length > 0 && (
                  <div class="border border-neutral-200 dark:border-neutral-700 rounded-lg p-4">
                    {userInfo?.user?.oauthTokens
                      .filter(provider => provider.strategy === "google")
                      .map((provider) => (
                        <div class="flex items-center justify-between">
                          <div class="flex items-center space-x-3">
                            <div class="flex-shrink-0">
                              <svg class="h-6 w-6" viewBox="0 0 46 47" fill="none">
                                <path d="M46 24.0287C46 22.09 45.8533 20.68 45.5013 19.2112H23.4694V27.9356H36.4069C36.1429 30.1094 34.7347 33.37 31.5957 35.5731L31.5663 35.8669L38.5191 41.2719L38.9885 41.3306C43.4477 37.2181 46 31.1669 46 24.0287Z" fill="#4285F4"></path>
                                <path d="M23.4694 47C29.8061 47 35.1161 44.9144 39.0179 41.3012L31.625 35.5437C29.6301 36.9244 26.9898 37.8937 23.4987 37.8937C17.2793 37.8937 12.0281 33.7812 10.1505 28.1412L9.88649 28.1706L2.61097 33.7812L2.52296 34.0456C6.36608 41.7125 14.287 47 23.4694 47Z" fill="#34A853"></path>
                                <path d="M10.1212 28.1413C9.62245 26.6725 9.32908 25.1156 9.32908 23.5C9.32908 21.8844 9.62245 20.3275 10.0918 18.8588V18.5356L2.75765 12.8369L2.52296 12.9544C0.909439 16.1269 0 19.7106 0 23.5C0 27.2894 0.909439 30.8731 2.49362 34.0456L10.1212 28.1413Z" fill="#FBBC05"></path>
                                <path d="M23.4694 9.07688C27.8699 9.07688 30.8622 10.9863 32.5344 12.5725L39.1645 6.11C35.0867 2.32063 29.8061 0 23.4694 0C14.287 0 6.36607 5.2875 2.49362 12.9544L10.0918 18.8588C11.9987 13.1894 17.25 9.07688 23.4694 9.07688Z" fill="#EB4335"></path>
                              </svg>
                            </div>
                            <div>
                              <div class="text-sm font-medium text-neutral-800 dark:text-neutral-200">
                                {t('settings.connectedAccounts.google')}
                              </div>
                              <div class="text-sm text-neutral-600 dark:text-neutral-400">
                                {userEmail}
                              </div>
                            </div>
                          </div>
                          <div class="flex items-center space-x-4">
                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-sm text-semibold font-medium bg-green-100 dark:bg-green-900 text-neutral-800 dark:text-neutral-200">
                              {t('settings.connectedAccounts.connected')}
                            </span>
                            <button id="revoke-google-access" class="inline-flex items-center px-3 py-2 text-sm font-medium text-white bg-neutral-800 dark:bg-neutral-700 border border-[#576469] rounded-lg hover:bg-[#576469] dark:hover:bg-[#576469] transition-colors duration-200">
                              <Icon name="power_off" />
                              {t('settings.connectedAccounts.revoke')}
                            </button>
                          </div>
                        </div>
                      ))
                    }
                  </div>
                )}
              </div>

              <div>
                <h3 class="text-lg font-medium text-neutral-800 dark:text-neutral-200 mb-2">
                  {t('settings.sessions.title')}
                </h3>
                <p class="text-sm text-neutral-600 dark:text-neutral-400 mb-4">
                  {t('settings.sessions.description')}
                </p>
                
                <div class="border border-neutral-200 dark:border-neutral-700 rounded-lg divide-y divide-neutral-200 dark:divide-neutral-700">
                  {allLogs.map((log, index) => (
                    <div class={`p-4 session-item ${index >= 5 ? 'hidden extra-session' : ''}`.trim()}>
                      <div class="flex items-center justify-between">
                        <div class="flex items-center space-x-4">
                          <div class="flex-shrink-0">
                            <svg class="w-6 h-6 text-[#7D87FF] dark:text-[#A4B3FF]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"/>
                            </svg>
                          </div>
                          <div>
                            <div class="text-sm font-medium text-neutral-800 dark:text-neutral-200">
                              {`${capitalizeFirstWord(log.os)} - ${capitalizeFirstWord(log.device)} - ${capitalizeFirstWord(log.browser)}`}
                            </div>
                            <div class="text-sm text-neutral-600 dark:text-neutral-400">
                              {t('settings.sessions.loggedIn')}: {new Date(log.loggedInAt!).toLocaleDateString()}
                            </div>
                          </div>
                        </div>
                        <div>
                          {sessionToken === log.sessionId ? (
                            <span class="inline-flex items-center px-3 py-1.5 rounded-lg text-sm font-medium bg-neutral-100 dark:bg-neutral-700 text-neutral-800 dark:text-neutral-200">
                              {t('settings.sessions.currentDevice')}
                            </span>
                          ) : (
                            <button
                              class="revoke-session-btn inline-flex items-center px-3 py-1.5 text-sm font-medium text-white bg-neutral-800 dark:bg-neutral-700 border border-[#576469] rounded-lg hover:bg-[#576469] dark:hover:bg-[#576469] transition-colors duration-200"
                              data-session-id={log.sessionId}
                            >
                              <Icon name="logout" />
                              {t('settings.sessions.revokeAccess')}
                            </button>
                          )}
                        </div>
                      </div>
                    </div>
                  ))}
                  {hasMoreSessions && (
                    <div class="p-4 text-center border-t border-neutral-200 dark:border-neutral-700">
                      <button id="see-more-sessions" class="text-sm font-medium text-[#576469] hover:text-[#e55559] transition-colors duration-200">
                        {t('settings.sessions.seeMore')}
                      </button>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>

          <div class="bg-red-50 dark:bg-red-900/20 rounded-xl border border-red-200 dark:border-red-800 p-6 shadow-lg shadow-neutral-900/20 hover:shadow-xl hover:shadow-neutral-900/20 dark:hover:shadow-white/10 transition-shadow duration-300">
            <h2 class="text-xl font-semibold text-red-800 dark:text-red-200 mb-6">
              {t('settings.danger.title')}
            </h2>
            
            <div class="space-y-4">
              <div class="flex items-center justify-between py-3 border-b border-red-200 dark:border-red-800">
                <div>
                  <div class="text-sm font-medium text-red-800 dark:text-red-200">
                    {t('settings.danger.logout')}
                  </div>
                  <div class="text-sm text-red-600 dark:text-red-400">
                    {t('settings.danger.logoutDescription')}
                  </div>
                </div>
                <a href="/logout" class="inline-flex items-center px-4 py-2 text-sm font-medium text-red-700 dark:text-red-200 bg-white dark:bg-red-900/30 border border-red-300 dark:border-red-700 rounded-lg hover:bg-red-50 dark:hover:bg-red-900/50 transition-colors duration-200">
                  {t('settings.danger.logout')}
                </a>
              </div>
              
              <div class="flex items-center justify-between py-3">
                <div>
                  <div class="text-sm font-medium text-red-800 dark:text-red-200">
                    {t('settings.danger.deleteAccount')}
                  </div>
                  <div class="text-sm text-red-600 dark:text-red-400">
                    {t('settings.danger.deleteAccountDescription')}
                  </div>
                </div>
                <button id="delete-account" class="inline-flex items-center px-4 py-2 text-sm font-medium text-white bg-red-600 border border-red-600 rounded-lg hover:bg-red-700 transition-colors duration-200">
                  <Icon name="delete" />
                  {t('settings.danger.deleteAccount')}
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Modals remain the same as in the original -->
  <div id="revoke-google-modal" class="fixed inset-0 bg-black/50 backdrop-blur-lg flex items-center justify-center hidden z-50 p-4">
    <div class="relative w-full max-w-md">
      <div class="absolute -inset-1.5 bg-gradient-to-r from-[#576469] to-[#393E41] rounded-xl blur-lg opacity-60"></div>
      <div class="relative bg-neutral-200 dark:bg-neutral-900 rounded-lg shadow-xl p-6">
        <div class="flex justify-between items-center mb-4">
          <h2 class="text-xl text-neutral-800 dark:text-neutral-200 font-bold">{t('settings.modals.revokeGoogle.title')}</h2>
          <button id="close-revoke-google-modal" class="p-2 rounded-full text-neutral-600 dark:text-neutral-300 hover:bg-neutral-200 dark:hover:bg-neutral-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500 dark:focus:ring-offset-neutral-900 transition-colors duration-200">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
        <div class="mb-6">
          <p class="text-neutral-600 dark:text-neutral-400">{t('settings.modals.revokeGoogle.message')}</p>
        </div>
        <div class="flex space-x-3">
          <button id="cancel-revoke-google" class="flex-1 px-4 py-2 text-sm font-medium text-neutral-700 dark:text-neutral-300 bg-neutral-100 dark:bg-neutral-700 border border-neutral-300 dark:border-neutral-600 rounded-lg hover:bg-neutral-200 dark:hover:bg-neutral-600 transition-colors duration-200">
            {t('settings.modals.revokeGoogle.cancel')}
          </button>
          <button id="confirm-revoke-google" class="flex-1 px-4 py-2 text-sm font-medium text-white bg-[#576469] border border-[#576469] rounded-lg hover:bg-[#e55559] transition-colors duration-200">
            {t('settings.modals.revokeGoogle.confirm')}
          </button>
        </div>
      </div>
    </div>
  </div>

  <div id="revoke-session-modal" class="fixed inset-0 bg-black/50 backdrop-blur-lg flex items-center justify-center hidden z-50 p-4">
    <div class="relative w-full max-w-md">
      <div class="absolute -inset-1.5 bg-gradient-to-r from-[#576469] to-[#393E41] rounded-xl blur-lg opacity-60"></div>
      <div class="relative bg-yellow-50/60 dark:bg-neutral-900 rounded-lg shadow-xl p-6">
        <div class="flex justify-between items-center mb-4">
          <h2 class="text-xl text-neutral-800 dark:text-neutral-200 font-bold">{t('settings.modals.revokeSession.title')}</h2>
          <button id="close-revoke-session-modal" class="p-2 rounded-full text-neutral-600 dark:text-neutral-300 hover:bg-neutral-200 dark:hover:bg-neutral-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500 dark:focus:ring-offset-neutral-900 transition-colors duration-200">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
        <div class="mb-6">
          <p class="text-neutral-600 dark:text-neutral-400">{t('settings.modals.revokeSession.message')}</p>
        </div>
        <div class="flex space-x-3">
          <button id="cancel-revoke-session" class="flex-1 px-4 py-2 text-sm font-medium text-neutral-700 dark:text-neutral-300 bg-neutral-100 dark:bg-neutral-700 border border-neutral-300 dark:border-neutral-600 rounded-lg hover:bg-neutral-200 dark:hover:bg-neutral-600 transition-colors duration-200">
            {t('settings.modals.revokeSession.cancel')}
          </button>
          <button id="confirm-revoke-session" class="flex-1 px-4 py-2 text-sm font-medium text-white bg-[#576469] rounded-lg hover:bg-[#e55559] transition-colors duration-200">
            {t('settings.modals.revokeSession.confirm')}
          </button>
        </div>
      </div>
    </div>
  </div>

  <div id="delete-account-modal" class="fixed inset-0 bg-black/50 backdrop-blur-lg flex items-center justify-center hidden z-50 p-4">
    <div class="relative w-full max-w-md">
      <div class="absolute -inset-1.5 bg-gradient-to-r from-red-500 to-red-700 rounded-xl blur-lg opacity-60"></div>
      <div class="relative bg-red-50 dark:bg-red-900/20 rounded-lg shadow-xl p-6 border border-red-200 dark:border-red-800">
        <div class="flex justify-between items-center mb-4">
          <h2 class="text-xl text-red-800 dark:text-red-200 font-bold">{t('settings.modals.deleteAccount.title')}</h2>
          <button id="close-delete-account-modal" class="p-2 rounded-full text-red-600 dark:text-red-400 hover:bg-red-100 dark:hover:bg-red-900/50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 dark:focus:ring-offset-red-900 transition-colors duration-200">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
        <div class="mb-6">
          <div class="flex items-center mb-3">
            <svg class="w-6 h-6 text-red-600 dark:text-red-400 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"/>
            </svg>
            <span class="text-lg font-semibold text-red-800 dark:text-red-200">{t('settings.modals.deleteAccount.warning')}</span>
          </div>
          <p class="text-red-700 dark:text-red-300 mb-4">{t('settings.modals.deleteAccount.message')}</p>
          <div class="bg-red-100 dark:bg-red-900/50 p-3 rounded-lg border border-red-300 dark:border-red-700">
            <p class="text-sm text-red-800 dark:text-red-200 font-medium">{t('settings.modals.deleteAccount.permanentlyText')}:</p>
            <ul class="text-sm text-red-700 dark:text-red-300 mt-1 list-disc list-inside">
              <li>{t('settings.modals.deleteAccount.deleteProfile')}</li>
              <li>{t('settings.modals.deleteAccount.removeData')}</li>
              <li>{t('settings.modals.deleteAccount.revokeServices')}</li>
            </ul>
          </div>
        </div>
        <div class="flex space-x-3">
          <button id="cancel-delete-account" class="flex-1 px-4 py-2 text-sm font-medium text-red-700 dark:text-red-300 bg-yellow-50/60 dark:bg-red-900/30 border border-red-300 dark:border-red-700 rounded-lg hover:bg-red-50 dark:hover:bg-red-900/50 transition-colors duration-200">
            {t('settings.modals.deleteAccount.cancel')}
          </button>
          <button id="confirm-delete-account" class="flex-1 px-4 py-2 text-sm font-medium text-white bg-red-600 border border-red-600 rounded-lg hover:bg-red-700 transition-colors duration-200">
            {t('settings.modals.deleteAccount.confirm')}
          </button>
        </div>
      </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const backButton = document.getElementById('back-button');
    
      if (backButton) {
        backButton.addEventListener('click', function() {
          if (window.history.length > 1) {
            window.history.back();
          } else {
            window.location.href = `/${window.location.pathname.split('/')[1]}/`;
          }
        });
      }
      const currentPath = window.location.pathname;
      const pathSegments = currentPath.split('/').filter(segment => segment !== '');
      const currentLang = pathSegments[0] || 'en';
      
      const languageSelector = document.getElementById('language-selector') as HTMLSelectElement | null;
      const themeSelector = document.getElementById('theme-selector') as HTMLSelectElement | null;
      
      let pendingSessionId: string | null = null;

      function initializeSessionsFeature() {
        const seeMoreBtn = document.getElementById('see-more-sessions');
        if (seeMoreBtn) {
          seeMoreBtn.addEventListener('click', function() {
            document.querySelectorAll('.extra-session').forEach(el => {
              el.classList.remove('hidden');
            });
            const parentElement = seeMoreBtn.parentElement;
            if (parentElement) {
              parentElement.remove();
            }
          });
        }
      }
  
      function showModal(modalId: string) {
        const modal = document.getElementById(modalId);
        if (modal) {
          modal.classList.remove('hidden');
          document.body.style.overflow = 'hidden';
        }
      }
  
      function hideModal(modalId: string) {
        const modal = document.getElementById(modalId);
        if (modal) {
          modal.classList.add('hidden');
          document.body.style.overflow = '';
        }
      }
  
      function initializeRevokeGoogleModal() {
        const revokeBtn = document.getElementById('revoke-google-access');
        const modal = document.getElementById('revoke-google-modal');
        const closeBtn = document.getElementById('close-revoke-google-modal');
        const cancelBtn = document.getElementById('cancel-revoke-google');
        const confirmBtn = document.getElementById('confirm-revoke-google');
  
        if (revokeBtn) {
          revokeBtn.addEventListener('click', function() {
            showModal('revoke-google-modal');
          });
        }
  
        [closeBtn, cancelBtn].forEach(btn => {
          if (btn) {
            btn.addEventListener('click', function() {
              hideModal('revoke-google-modal');
            });
          }
        });
  
        if (confirmBtn) {
          confirmBtn.addEventListener('click', async function() {
            try {
              const response = await fetch('/api/auth/revoke/google', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
              });
              
              if (response.ok) {
                window.location.href = `/${currentLang}?revoked=true`;
              } else {
                const data = await response.json();
                alert(`Failed to revoke access: ${data.error}`);
              }
            } catch (error) {
              console.error('Error revoking access:', error);
              alert('An error occurred while revoking access.');
            }
            hideModal('revoke-google-modal');
          });
        }
  
        if (modal) {
          modal.addEventListener('click', function(e) {
            if (e.target === modal) {
              hideModal('revoke-google-modal');
            }
          });
        }
      }
  
      function attachSessionRevokeListeners() {
        const revokeSessionBtns = document.querySelectorAll('.revoke-session-btn');
        revokeSessionBtns.forEach(btn => {
          btn.addEventListener('click', function(e) {
            e.preventDefault();
            const button = e.currentTarget as HTMLButtonElement;
            if (button) {
              const sessionId = button.getAttribute('data-session-id');
                          
              if (!sessionId) {
                console.error('No session ID found');
                return;
              }

              pendingSessionId = sessionId;
              showModal('revoke-session-modal');
            }
          });
        });
      }

      function initializeRevokeSessionModal() {
        const modal = document.getElementById('revoke-session-modal');
        const closeBtn = document.getElementById('close-revoke-session-modal');
        const cancelBtn = document.getElementById('cancel-revoke-session');
        const confirmBtn = document.getElementById('confirm-revoke-session');

        attachSessionRevokeListeners();

        [closeBtn, cancelBtn].forEach(btn => {
          if (btn) {
            btn.addEventListener('click', function() {
              hideModal('revoke-session-modal');
              pendingSessionId = null;
            });
          }
        });

        if (confirmBtn) {
          confirmBtn.addEventListener('click', async function() {
            if (!pendingSessionId) return;

            try {
              const response = await fetch('/api/auth/revoke-access', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify({ sessionId: pendingSessionId }),
              });

              if (response.ok) {
                const sessionBtn = document.querySelector(`[data-session-id="${pendingSessionId}"]`);
                if (sessionBtn) {
                  const sessionItem = sessionBtn.closest('.session-item');
                  if (sessionItem) {
                    sessionItem.remove();
                  }
                }
                alert('Session revoked successfully');
              } else {
                const data = await response.json();
                alert(`Failed to revoke session: ${data.error}`);
              }
            } catch (error) {
              console.error('Error revoking session:', error);
              alert('An error occurred while revoking the session.');
            }
            hideModal('revoke-session-modal');
            pendingSessionId = null;
          });
        }

        if (modal) {
          modal.addEventListener('click', function(e) {
            if (e.target === modal) {
              hideModal('revoke-session-modal');
              pendingSessionId = null;
            }
          });
        }
      }

      function initializeDeleteAccountModal() {
        const deleteBtn = document.getElementById('delete-account');
        const modal = document.getElementById('delete-account-modal');
        const closeBtn = document.getElementById('close-delete-account-modal');
        const cancelBtn = document.getElementById('cancel-delete-account');
        const confirmBtn = document.getElementById('confirm-delete-account');

        if (deleteBtn) {
          deleteBtn.addEventListener('click', function() {
            showModal('delete-account-modal');
          });
        }

        [closeBtn, cancelBtn].forEach(btn => {
          if (btn) {
            btn.addEventListener('click', function() {
              hideModal('delete-account-modal');
            });
          }
        });

        if (confirmBtn) {
          confirmBtn.addEventListener('click', async function() {
            try {
              const response = await fetch('/api/auth/delete-account', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
              });
              
              if (response.ok) {
                window.location.href = `/${currentLang}?account_deleted=true`;
              } else {
                const data = await response.json();
                alert(`Failed to delete account: ${data.error}`);
              }
            } catch (error) {
              console.error('Error deleting account:', error);
              alert('An error occurred while deleting your account.');
            }
            hideModal('delete-account-modal');
          });
        }

        if (modal) {
          modal.addEventListener('click', function(e) {
            if (e.target === modal) {
              hideModal('delete-account-modal');
            }
          });
        }
      }
      initializeSessionsFeature();
      initializeRevokeGoogleModal();
      initializeRevokeSessionModal();
      initializeDeleteAccountModal();
      });
  </script>
</MainLayout>